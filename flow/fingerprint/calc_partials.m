function partials = calc_partials(timing_parms, parms, doFractions)
% function partials = calc_partials(timing_parms, parms, doFractions)
%
% compute partial derivatives of the MRF signal relative to each physiological
% parameter, one at a time.   signals are generated by gen_signals_180320.m
%
%    phys parms from the input structure
%
%     mtis0 = parms.mtis0;
%     f = parms.f;
%     cbva = parms.cbva;
%     bat = parms.bat;
%     bat2 = parms.bat2;
%     kfor = parms.kfor;
%     r1tis = parms.r1tis;
%     flip = parms.flip;
%     Disp = parms.Disp;
%
%  delta_parms will be 10% of a specficied average value (+5% and - 5%)
%
% timing_parms are for the deisgn we are testing
%     t_delay =           timing_parms.t_delay;
%     t_tag =               timing_parms.t_tag;
%     t_adjust =          timing_parms.t_adjust;
%     order =               timing_parms.order;
%     isLabel =            timing_parms.isLabel ;
%     aqwindow =       timing_parms.t_aq;
%
%  if doFractions==1
%   returns the change in signal at each time point ./ original signal
%   df/f(parm)   .... not df/dparm !
% 

Nframes = length(timing_parms.t_tag);
doSub=0;
doFigs = 0;

% first set of signals
sig0 = gen_signals_180320(parms,  timing_parms, doFigs,doSub) ;

p=struct2arr(parms);

partials = zeros(9, length(sig0));


% compute a new signal for each delta parm: one at a time
% choose a  step size:: 5% of an average value
% we will not pay attention to mtis0
allp=[];
for m=1:9
            ptmp = p;
            ptmp(m) = 0.95 * p(m);
            p_lo = arr2struct(ptmp);
            ptmp(m) = 1.05 * p(m);
            p_hi = arr2struct(ptmp);
            
            sig1 = gen_signals_180320(p_lo,  timing_parms, doFigs,doSub) ;
            sig2 = gen_signals_180320(p_hi,  timing_parms, doFigs,doSub) ;
            
            diff_signals= (sig2 - sig1) / (0.1 * p(m));
            if doFractions
                diff_signals= (sig2 - sig1) ./ sig0;
            end      
            partials(m,:) = diff_signals;
end         
        
            
            %{            
% second partial  derivative wrt two parms:

for m=1:9
    for n=1:9
            % second partial  derivative wrt two parms:
            ptmp = p;
            ptmp(m) = 0.95 * p(m);
            ptmp(n) = 0.95 * p(n);
            p_lolo = arr2struct(ptmp);
            
            ptmp = p;
            ptmp(m) = 1.05 * p(m);
            ptmp(n) = 1.05 * p(n);
            p_hihi = arr2struct(ptmp);
            
            ptmp = p;
            ptmp(m) = 1.05 * p(m);
            ptmp(n) = 0.95 * p(n);
            p_hilo = arr2struct(ptmp);
            
            ptmp = p;
            ptmp(m) = 0.95 * p(m);
            ptmp(n) = 1.05 * p(n);
            p_lohi = arr2struct(ptmp);
            
            sig_lolo = gen_signals_180320(p_lolo,  timing_parms, doFigs,doSub) ;
            sig_hihi = gen_signals_180320(p_hihi,  timing_parms, doFigs,doSub) ;
            sig_lohi = gen_signals_180320(p_lohi,  timing_parms, doFigs,doSub) ;
            sig_hilo = gen_signals_180320(p_hilo,  timing_parms, doFigs,doSub) ;
            
            diff_signals = (sig_hihi - sig_hilo - sig_lohi + sig_lolo) / (4* 0.1*  p(n) * 0.1*p(m) ) ;
            
        end
        
        %        plot(diff2_signals)
        %        drawnow
        mse = norm(diff_signals);
        
        partials(m,n) = mse;
        
    end
    
end
%}


return


%%

%%



