function perf(BNameString, xdim, ydim, NumScans, TI_range,show)
%
% function perf(BNameString, xdim, ydim, NumScans, TI_range,show)
%
% Computes perfusion map using Buxton's model
% for FAIR experiment.  The model is in FAIR_func.m
%
% uses the file Mot.dat, which was generated by 
% t1_map.m.  
% 
% uses the complex data

%%  Assumed constants  %%%
lambda_T2 = 0.7;
T1b = 1.3;
threshold = 60; % signal intensity threshold
scaleFactor = 1000;
FlowScaleFactor = 100 * 60;
alpha = 0.9;
%%%%%%%%%%%%%%%%%%%%%%%%%

% Initial Guesses %%%%%%%%%%
%dt = 0.01;
f_guess = 0.8;
dt_guess = 0.05;
Tau_guess = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% calculate the TI's
D_TI = max(max(TI_range) - min(TI_range) )/(NumScans/2-1)
for i=0: NumScans/2-1
   TI(i+1) = (i) * D_TI + min(TI_range);
end
TI = TI'
size(TI)

% allocate space for the data
SS_data = zeros(NumScans/2 , xdim*ydim*2);
NS_data = zeros(NumScans/2 , xdim*ydim*2);
FAIR_data = zeros(NumScans/2, xdim*ydim*2);
FAIR_size = size(FAIR_data);


% determine the name of the appropriate file
% and load slice selective data
disp('Loading  SS data ...')

for i=0:NumScans/2 -1 
   IRNameString = BNameString;
   if (i*2 )<10
     IRNameString = strcat(IRNameString ,'0');
  end
  
  IRNameString = strcat(IRNameString ,num2str(2*i));
  disp(IRNameString);
  SS_data(1+i,:) = (get_pix_arr(IRNameString, FAIR_size(2), 'float32'))';
  
end

% determine the name of the appropriate file
% and load the non selective data
disp('Loading  NS data ...')
for i=0:NumScans/2 -1
   IRNameString = BNameString;
   if (i*2+1 )<10
     IRNameString = strcat(IRNameString ,'0');
  end
  
  IRNameString = strcat(IRNameString ,num2str(i*2+1));
  disp(IRNameString);
  NS_data(1+i,:) = (get_pix_arr(IRNameString, FAIR_size(2), 'float32'))';
  
end
   
% perform the FAIR subtraction 
% the signal is the abs of the complex subtraction
FAIR_data = NS_data - SS_data;

tmp = zeros(NumScans/2 , xdim*ydim);
for i=1:xdim*ydim
   tmp(:,i) = FAIR_data(:,2*i) + FAIR_data(:,2*i)*j;
end
FAIR_data = abs(tmp);
  
%disp('press return to continue')
%pause
clear tmp NS_data SS_data;


% determine the name of the appropriate file
% write image files containing the subtraction images 
disp('Writing FAIR data ...')
for i=1:NumScans/2 %skip first image ...NO
   IRNameString = 'FAIR';
   if (i )<10
     IRNameString = strcat(IRNameString ,'0');
  end
  
  IRNameString = strcat(IRNameString ,num2str(i));
  disp(IRNameString);
  pFile = fopen(IRNameString,'w');
  fwrite(pFile,FAIR_data(i,:),'int16');
  fclose(pFile);
end

% Read in the tissue relaxed magnetization of the tissue
% Calculate the relaxed magnetization of the blood from the 
% corrected pertition coefficient
Mob= (get_pix_arr('Mot.dat', FAIR_size(2),'int16'))' ./ lambda_T2;


  
% this next chunk of code does a 
% pixel average to a 64 x 64 matrix if desired...
% disp('before reduction')
 
if xdim == 769876986759878
   
   tmp1 = zeros(1, xdim*ydim/4);
   tmp2 = zeros(NumScans/2 -1, xdim*ydim/4);
   
   if show ==1
      colormap(gray);
      imagesc(Mob);
      disp('Averaging ... Press return to continue')
      pause
      
   end
 
   for i=1:xdim/2 
   for j=1:ydim/2
      %disp([ i*2  (xdim-1)*(2*j)])
      
      tmp1( i + (xdim/2-1) * j) ...
         = Mob( i*2-1 + (xdim-1)*(2*j-1) ) ...
         + Mob( i*2-1 + (xdim-1)*(2*j)   )...
         + Mob( i*2   + (xdim-1)*(2*j-1) ) ...
         + Mob( i*2   + (xdim-1)*(2*j)   )   ;
      
      tmp2(: , i + (xdim/2-1) * j) ...
         = FAIR_data(:, i*2-1 + (xdim-1)*(2*j-1) ) ...
         + FAIR_data(:, i*2-1 + (xdim-1)*(2*j)   )...
         + FAIR_data(:, i*2   + (xdim-1)*(2*j-1) ) ...
         + FAIR_data(:, i*2   + (xdim-1)*(2*j)   ) ;
      
   end
   end

   xdim = xdim/2;
   ydim = ydim/2;
   Mob = tmp1/4;
   FAIR_data=tmp2/4;
   clear tmp1 tmp2

	if show ==1
      colormap(gray);
      imagesc(Mob);
      disp('Finished averaging...Press return')
      pause
   end

end
%%%%%%%%%%%


% feed the data into a curve fitting algorithm
disp('Fitting ...')


for pix = 1: xdim*ydim
   
   FAIR_data_buffer = zeros(NumScans/2, 2);

   if Mob(pix)~=0
     
      FAIR_data_buffer(:,2) = FAIR_data(:,pix);
      FAIR_data_buffer(:,1) = TI;
      sz = size(FAIR_data_buffer);
      
      %  note - I'm going to get rid of an additional 
      % image pair, they look suspicious
      FAIR_data_buffer = FAIR_data_buffer(3:sz(1),:);
      sz = size(FAIR_data_buffer);
      %%%%%%%%%%%
      
      % Plot the data before the fit (if requested)
      if show ==1
      	cla
      	t = FAIR_data_buffer(:,1);
      	M = FAIR_data_buffer(:,2);
      	plot (t,M, 'k*');
      	hold on
      end
      
      %guess0 = [ Tau_guess; f_guess;];
      %guess = leastsq('FAIR_func', guess0, [],[], ...
      % FAIR_data_buffer ,alpha, Mob(pix), T1b);
      
      guess0 = [ dt_guess; Tau_guess; f_guess;];
      guess = curvefit('FAIR_func',guess0,...
          FAIR_data_buffer(:,1), FAIR_data_buffer(:,2),...
          [],[], alpha,Mob(pix), T1b, dt);
       
     
      dt = guess(1);    
      Tau = guess(2);
      f = guess(3);
      
      % a few constrains ....
      if dt<0
         dt=0;
         Tau=0;
         f=0;
      end
      
      %%%%%%%%%%%%
      disp('--------------------------')
	   disp([ 'x' '	y' ])
	   disp([mod(pix,64) floor(pix/64)]);
	   disp(['f ' 'dt' '	Tau'] )
      disp( [f	dt	Tau] )
      
      % Plot the fitted curve on top of the
      % actual data (if requested)
      if show==1 
         disp( 'plotting FAIR_curve' )
         FAIR_curve(t ,[dt; Tau; f], Mob(pix), T1b, alpha);
         drawnow
         %disp('press return to continue')
         %pause    
      end
      %%%
      
   else
      f = 0;
      dt = 0;    
      Tau = 0;
      
   end
   
   %scale the results for consistent units
   f_data(pix) = f *FlowScaleFactor;   % ml/min.100g
   dt_data(pix) = dt*scaleFactor;      % msec
   Tau_data(pix) = Tau*scaleFactor;    % msec
   
end

% Write all the results to the appropriate files
pFile = fopen('perf.dat','wb');
fwrite(pFile, f_data, 'int16');
fclose(pFile);

pFile = fopen('dt.dat','wb');
fwrite(pFile, dt_data, 'int16');
fclose(pFile);

pFile = fopen('Tau.dat','wb');
fwrite(pFile, Tau_data, 'int16');
fclose(pFile);

disp('Finished Writing perfusion maps')

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
