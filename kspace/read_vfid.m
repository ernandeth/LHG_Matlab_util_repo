function [datafilehead, datablockhead, data] = read_vfid(FID_filename, verbose);% function [datafilehead, datablockhead, data] = read_vfid(FID_filename , verbose);%% This function reads "fid" files from Varian system.% The input parameter is "filename" that contains the path% and the file name of the "fid" file.% The output parameters are:%    Data File Header "datafilehead" (structure) that contains:%       nblocks = Number of blocks in file%       ntraces = Number of traces per block%       np = Number of elements per trace%       ebytes = Number of bytes per element%       tbytes = Number of bytes per trace%       bbytes = Number of bytes per block%       vers_id = Software version, file_id status bits%       status = Status of whole file%       nbheaders = Number of block headers per block%    Data Block Header "datablockhead" (structure) that contains:%       scale%       status%       index%       mode%       ctcount%       lpval%       rpval%       lvl%       tlt%    "data" (Complex matrix with FID's)%% Rev. 2.0   Jun/27/2001% Francisco M. Martinez S.% Please send comments and/or modifications to sfmartin@umich.edu%% rev. by Luis Hernandez-Garcia on Jun/2010%if nargin==0    [FID_file,FID_path]=uigetfile('*.*','Free Induction Decays (Raw Data - FID File)');    cd(FID_path);    FID_filename=strcat(FID_path,FID_file);end% filedata=fopen(FID_filename,'r','ieee-be');  LHG 6/25/10filedata=fopen(FID_filename,'r','ieee-le');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% File Header%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%datafilehead.nblocks = fread(filedata,1,'int32');		% Number of blocks in filedatafilehead.ntraces = fread(filedata,1,'int32');;	% Number of traces per blockdatafilehead.np = fread(filedata,1,'int32');			% Number of elements per tracedatafilehead.ebytes = fread(filedata,1,'int32');		% Number of bytes per elementdatafilehead.tbytes = fread(filedata,1,'int32');		% Number of bytes per tracedatafilehead.bbytes = fread(filedata,1,'int32');		% Number of bytes per blockdatafilehead.vers_id = fread(filedata,1,'int16'); 	% Software version, file_id status bits \datafilehead.status = fread(filedata,1,'int16');  	% Status of whole file                  / Check bit orderdatafilehead.nbheaders = fread(filedata,1,'int32');	% Number of block headers per block%fclose(filedata);% The following 10 lines are optional. Used to display file header informationif verbose    disp('File Header');    disp(sprintf('Number of Data Blocks in File = %i',datafilehead.nblocks));    disp(sprintf('Number of Traces per Block = %i',datafilehead.ntraces));    disp(sprintf('Number of Simple Elements per Trace = %i',datafilehead.np));    disp(sprintf('Number of Bytes per Element = %i',datafilehead.ebytes));    disp(sprintf('Number of Bytes per Trace = %i',datafilehead.tbytes));    disp(sprintf('Number of Bytes per Block = %i',datafilehead.bbytes));    disp(sprintf('Software Version = %i',datafilehead.vers_id));    disp(sprintf('Status = %i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i',datafilehead.status));    disp(sprintf('Number of Block Headers per Block = %i',datafilehead.nbheaders));end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Block Header%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%data = zeros(datafilehead.nblocks,datafilehead.np/2, datafilehead.ntraces);for i=1:datafilehead.nblocks    datablockhead.scale(i) = fread(filedata,1,'int16'); % bitshift(A(9+(i-1)*datafilehead.bbytes/datafilehead.ebytes),-16);    datablockhead.status(i,:) = fread(filedata,1,'int16'); %bitget(A(9+(i-1)*datafilehead.bbytes/datafilehead.ebytes),1:16);    datablockhead.index(i) = fread(filedata,1,'int16'); % bitshift(A(10+(i-1)*datafilehead.bbytes/datafilehead.ebytes),-16);    datablockhead.mode(i,:) = fread(filedata,1,'int16'); % bitget(A(10+(i-1)*datafilehead.bbytes/datafilehead.ebytes),1:16);    datablockhead.ctcount(i) = fread(filedata,1,'int32'); % A(11+(i-1)*datafilehead.bbytes/datafilehead.ebytes);    datablockhead.lpval(i) = fread(filedata,1,'int32'); % double(A(12+(i-1)*datafilehead.bbytes/datafilehead.ebytes));    datablockhead.rpval(i) = fread(filedata,1,'int32'); % double(A(13+(i-1)*datafilehead.bbytes/datafilehead.ebytes));    datablockhead.lvl(i) = fread(filedata,1,'int32'); % double(A(14+(i-1)*datafilehead.bbytes/datafilehead.ebytes));    datablockhead.tlt(i) = fread(filedata,1,'int32'); % double(A(15+(i-1)*datafilehead.bbytes/datafilehead.ebytes));    if verbose        % The following 10 lines are optional. Used to display block header information        disp(sprintf('Block Header %i',i));        disp(sprintf('Scale = %f',datablockhead.scale(i)));        disp(sprintf('Status = %i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i',datablockhead.status(i,:)));        disp(sprintf('Index = %i',datablockhead.index(i)));        disp(sprintf('Mode = %i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i',datablockhead.mode(i,:)));        disp(sprintf('CTCount = %f',datablockhead.ctcount(i)));        disp(sprintf('lpval = %f',datablockhead.lpval(i)));        disp(sprintf('rpval = %f',datablockhead.rpval(i)));        disp(sprintf('lvl = %f',datablockhead.lvl(i)));        disp(sprintf('tlt = %f',datablockhead.tlt(i)));    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Extracting data    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %   data_block = fread(filedata, [datafilehead.np,datafilehead.ntraces],'int32');   % LHG 6/25/10    data_block = fread(filedata, [datafilehead.np,datafilehead.ntraces],'float32');    data(i,:,:) = reshape(data_block([1:2:end]),datafilehead.np/2,datafilehead.ntraces) +...        j*reshape(data_block([2:2:end]),datafilehead.np/2,datafilehead.ntraces);endfclose(filedata);