function [par,val]=ReadPROCPAR(PROCPAR_filename,flag)% This function reads "procpar" files from Varian system.% The input parameters are "filename" and "flag"% If flag equals one (1), then the names and values of all the parameters% specified on the procpar file are extracted and added to the base% workspace. If flag equals zero (0) none of the parameters is added to the% base workspace.% "filename" is any valid file name used by Matlab and it should include% a valid path and filename, usually 'path/procpar'.% "par" is an array containing the names of all the parameters and "val" is% an array containing the respective values.% Examples:% [par,val]=RaedPROCPAR --> Returns the column vectors par and val.%                           par is a cell array that contains the names of all%                           the parameters used in the procpar file.%                           val contains the values of all the parameters used%                           in the procpar file. %                           par{1} has a value val{1}, par{2} has a value val{2}%                           and so on.%                           The program asks the user the name and location of the %                           procpar file using a MATLAB predefined window to open a file.%                           None of the parameters used in the procpar file is added %                           in the base workspace.% [par]=RaedPROCPAR   -->   Same as before but only returns the names of the parameters%                           used on the procpar file.% [par]=ReadPROCPAR(1) -->  Returns the column vector par that contains the names of all%                           the parameters used in the procpar file.%                           In addition, each parameter used in the procpar file is added %                           in the workspace as a new variable with its corresponding value.%                           The program ask the user the name and location of the %                           procpar file using a predefined window to open a file.%                           Notice that some parameters used in the Varian system may interfere%                           with normal MATLAB commands such as "axis", "slice", etc.% [par,val]=RaedPROCPAR('c:\demovarian\procpar,1) --> Returns the column vectors%                           par and val. Notice that the filename includes the path.%                           In addition, each parameter used in the procpar file is added %                           in the workspace as a new variable with its corresponding value.% [par,val]=RaedPROCPAR('c:\demovarian\procpar,0) --> Returns the column vectors%                           par and val. Notice that the filename includes the path.%                           This time, none of the parameters used in the procpar file is added %                           in the base workspace.% Rev. 1.0   Jun/21/2001% Francisco M. Martinez S.% Please send comments and/or modifications to sfmartin@umich.edu%if nargin==0   [PROCPAR_file,PROCPAR_path]=uigetfile('*procpar*','Parameters File (procpar file)');   cd(PROCPAR_path);   PROCPAR_filename=strcat(PROCPAR_path,PROCPAR_file);   flag=0;elseif nargin==1   if isa(PROCPAR_filename,'double')      flag=PROCPAR_filename;      [PROCPAR_file,PROCPAR_path]=uigetfile('*procpar*','Parameters File (procpar file)');      cd(PROCPAR_path);      PROCPAR_filename=strcat(PROCPAR_path,PROCPAR_file);   else      flag=0;   endendfiledata=fopen(PROCPAR_filename,'r','ieee-be');i=1;while 1   line=fgetl(filedata);   if ~ischar(line)      break;   end   [name resi]=strtok(line);   par{i}=name;   [resi resi]=strtok(resi);   [basictype resi]=strtok(resi);   line=fgetl(filedata);   [dummy resi]=strtok(line);   number_of_values=str2num(dummy);   if basictype=='1'      if number_of_values==1         value_num=str2num(resi);      else         for k=1:number_of_values            [value resi]=strtok(resi);            value_num(k)=str2num(value);         end      end      if flag==1         assignin('base',name,value_num);      end      val{i}=value_num;      line=fgetl(filedata);   else      for k=1:number_of_values         l=findstr(line,'"');         value.str{k}=line(l(1)+1:l(2)-1);         line=fgetl(filedata);      end      if flag==1         assignin('base',name,value.str);      end      val{i}=value.str;      clear value   end   i=i+1;endfclose(filedata);[par,I]=sort(par);for i=1:size(par,2);   valu(i)=val(I(i));endpar=char(par');val=valu';